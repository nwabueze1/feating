import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useBlockSelector } from "../../../../helpers/blockStore";
import { useCartCardStyles } from "./styles";
import { MdDelete } from "react-icons/md";
import clx from "classnames";
import { getCurrency, createImageSrcset, imageSizes } from "../../../../helpers";
import { parseOptionString } from "./helper";
import { calculateCartSubTotal } from "../../../../blocks/EuBlock17/helper";
import { useSelector } from "react-redux";
import { useUpdateCartItemQuantity } from "../../hooks";
import { CircularProgress } from "@mui/material";
export var DishCards = function (_a) {
    var _b, _c, _d, _e, _f, _g, _h, _j;
    var cartItem = _a.cartItem;
    var blockConfiguration = useBlockSelector(function (state) { return state; });
    var classes = useCartCardStyles(blockConfiguration);
    var _k = useSelector(function (state) { return state; }), restaurant = _k.restaurant, networkOperation = _k.networkOperation;
    var cart = restaurant === null || restaurant === void 0 ? void 0 : restaurant.cart;
    var currency = getCurrency((_d = (_c = (_b = cart === null || cart === void 0 ? void 0 : cart.restaurant) === null || _b === void 0 ? void 0 : _b.bank_info) === null || _c === void 0 ? void 0 : _c.currency) !== null && _d !== void 0 ? _d : "");
    var updateCartItemQuantity = useUpdateCartItemQuantity();
    var removeQuantity = function (options) { var _a; return updateCartItemQuantity({ uuid: (_a = cartItem === null || cartItem === void 0 ? void 0 : cartItem.uuid) !== null && _a !== void 0 ? _a : "", quantity: (cartItem === null || cartItem === void 0 ? void 0 : cartItem.quantity) === 1 ? 1 : (cartItem === null || cartItem === void 0 ? void 0 : cartItem.quantity) - 1, options: options }); };
    var addQuantity = function (options) { var _a; return updateCartItemQuantity({ uuid: (_a = cartItem === null || cartItem === void 0 ? void 0 : cartItem.uuid) !== null && _a !== void 0 ? _a : "", quantity: (cartItem === null || cartItem === void 0 ? void 0 : cartItem.quantity) + 1, options: options }); };
    var deleteQuantity = function () { var _a; return updateCartItemQuantity({ uuid: (_a = cartItem === null || cartItem === void 0 ? void 0 : cartItem.uuid) !== null && _a !== void 0 ? _a : "", quantity: 0, options: "" }); };
    return (_jsx("article", { className: classes.root, children: _jsxs("div", { className: classes.container, children: [_jsxs("div", { children: [_jsx("img", { srcSet: createImageSrcset((_e = cartItem === null || cartItem === void 0 ? void 0 : cartItem.menuItem) === null || _e === void 0 ? void 0 : _e.image), src: (_g = (_f = cartItem === null || cartItem === void 0 ? void 0 : cartItem.menuItem) === null || _f === void 0 ? void 0 : _f.image) === null || _g === void 0 ? void 0 : _g.src, sizes: imageSizes, alt: (_j = (_h = cartItem === null || cartItem === void 0 ? void 0 : cartItem.menuItem) === null || _h === void 0 ? void 0 : _h.image) === null || _j === void 0 ? void 0 : _j.alternative_text, className: classes.cartCardImage }), _jsx(MdDelete, { className: classes.removalMobile, onClick: function () { return deleteQuantity(); } })] }), _jsxs("div", { className: classes.textContainer, children: [_jsxs("h5", { className: classes.textName, children: [cartItem === null || cartItem === void 0 ? void 0 : cartItem.menuItem.name, networkOperation === "update.cart-item.".concat(cartItem === null || cartItem === void 0 ? void 0 : cartItem.uuid) && (_jsx("div", { className: classes.dishSpinnerParent, children: _jsx(CircularProgress, { color: "inherit", size: "15px" }) }))] }), (cartItem === null || cartItem === void 0 ? void 0 : cartItem.options) && (_jsxs("div", { className: classes.optionContainer, children: [_jsx("p", { className: classes.optionText, children: "OPTIONS:" }), _jsx("div", { className: classes.optionList, children: _jsx("span", { className: classes.optionName, children: parseOptionString(JSON.parse(cartItem.options)) }) })] })), _jsxs("div", { className: classes.priceWrapper, children: [_jsxs("div", { className: classes.priceContainer, children: [_jsx("span", { className: classes.currency, children: currency }), _jsxs("span", { children: [" ", calculateCartSubTotal(restaurant === null || restaurant === void 0 ? void 0 : restaurant.cart, cartItem.uuid)] })] }), !(cart === null || cart === void 0 ? void 0 : cart.order) && (_jsxs("div", { className: clx(classes.addQuantity, "mobile"), children: [_jsx("p", { className: classes.quantitySign, children: "-" }), _jsx("p", { className: classes.quantity, children: cartItem === null || cartItem === void 0 ? void 0 : cartItem.quantity }), _jsx("p", { className: classes.quantitySign, children: "+" })] }))] })] }), !(cart === null || cart === void 0 ? void 0 : cart.order) && (_jsxs("div", { className: classes.addQuantityContainer, children: [_jsxs("div", { className: classes.addQuantity, children: [_jsx("p", { className: classes.quantitySign, onClick: function () { return removeQuantity(cartItem === null || cartItem === void 0 ? void 0 : cartItem.options); }, children: "-" }), _jsx("p", { className: classes.quantity, children: cartItem === null || cartItem === void 0 ? void 0 : cartItem.quantity }), _jsx("p", { className: classes.quantitySign, onClick: function () { return addQuantity(cartItem === null || cartItem === void 0 ? void 0 : cartItem.options); }, children: "+" })] }), _jsxs("div", { className: classes.removal, onClick: function () { return deleteQuantity(); }, children: [_jsx("span", { children: "Remove" }), " ", _jsx(MdDelete, { className: "icon" })] })] }))] }) }));
};
